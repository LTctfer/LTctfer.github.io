<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Crypto学习进度记录</title>
    <link href="/2024/02/21/Crypto%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/02/21/Crypto%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>这篇帖子主要是用来记录最近的学习情况，应该会比较持续的更新</p><h4 id="1-RSA算法学习"><a href="#1-RSA算法学习" class="headerlink" title="1.RSA算法学习"></a>1.RSA算法学习</h4><p>最近入手了xenny✌的NSS工坊课程，开始比较系统的进行密码学的学习，最近也打了几个比赛（虽然实力不怎么样打不出来几道题），主要是讨论几个题目</p><h5 id="SICTF——SuperRsa"><a href="#SICTF——SuperRsa" class="headerlink" title="SICTF——SuperRsa"></a>SICTF——SuperRsa</h5><p>源代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import *<br><br><span class="hljs-attribute">p</span>=getPrime(1024)<br><br><span class="hljs-attribute">q</span>=getPrime(1024)<br><br><span class="hljs-attribute">n</span>=p*q<br><br><span class="hljs-attribute">e1</span>=55<br><br><span class="hljs-attribute">e2</span>=200<br><br><span class="hljs-attribute">m</span>=bytes_to_long(&quot;flag&quot;)<br><br>assert(pow(m,5) &lt; n)<br><br>c1 = pow(m, e1, n)<br><br>c2 = pow(m, e2, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1=&quot;</span>,c1)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c2=&quot;</span>,c2)<br><br><br><br>n= 19006830358118902392432453595802675566730850352890246995920642811967821259388009049803513102750594524106471709641202019832682438027312468849299985832675191795417160553379580813410722359089872519372049229233732405993062464286888889084640878784209014165871696882564834896322508054231777967011195636564463806270998326936161449009988434249178477100127347406759932149010712091376183710135615375272671888541233275415737155953323133439644529709898791881795186775830217884663044495979067807418758455237701315019683802437323177125493076113419739827430282311018083976114158159925450746712064639569301925672742186294237113199023<br><br>c1= 276245243658976720066605903875366763552720328374098965164676247771817997950424168480909517684516498439306387133611184795758628248588201187138612090081389226321683486308199743311842513053259894661221013008371261704678716150646764446208833447643781574516045641493770778735363586857160147826684394417412837449465273160781074676966630398315417741542529612480836572205781076576325382832502694868883931680720558621770570349864399879523171995953720198118660355479626037129047327185224203109006251809257919143284157354935005710902589809259500117996982503679601132486140677013625335552533104471327456798955341220640782369529<br><br>c2= 11734019659226247713821792108026989060106712358397514827024912309860741729438494689480531875833287268454669859568719053896346471360750027952226633173559594064466850413737504267807599435679616522026241111887294138123201104718849744300769676961585732810579953221056338076885840743126397063074940281522137794340822594577352361616598702143477379145284687427705913831885493512616944504612474278405909277188118896882441812469679494459216431405139478548192152811441169176134750079073317011232934250365454908280676079801770043968006983848495835089055956722848080915898151352242215210071011331098761828031786300276771001839021<br></code></pre></td></tr></table></figure><p>这道题目是一道非常明显的共模攻击的题目，但是问题是两个 e并不互素，我原本的解法是参考了这篇（<a href="https://blog.csdn.net/serendipity1130/article/details/120154534%EF%BC%89">https://blog.csdn.net/serendipity1130/article/details/120154534）</a> ，直接将这个问题转换成了e1*e2之后爆破的结果，我的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python">n= <span class="hljs-number">19006830358118902392432453595802675566730850352890246995920642811967821259388009049803513102750594524106471709641202019832682438027312468849299985832675191795417160553379580813410722359089872519372049229233732405993062464286888889084640878784209014165871696882564834896322508054231777967011195636564463806270998326936161449009988434249178477100127347406759932149010712091376183710135615375272671888541233275415737155953323133439644529709898791881795186775830217884663044495979067807418758455237701315019683802437323177125493076113419739827430282311018083976114158159925450746712064639569301925672742186294237113199023</span><br>e1e2=<span class="hljs-number">11000</span><br>c1=<span class="hljs-number">276245243658976720066605903875366763552720328374098965164676247771817997950424168480909517684516498439306387133611184795758628248588201187138612090081389226321683486308199743311842513053259894661221013008371261704678716150646764446208833447643781574516045641493770778735363586857160147826684394417412837449465273160781074676966630398315417741542529612480836572205781076576325382832502694868883931680720558621770570349864399879523171995953720198118660355479626037129047327185224203109006251809257919143284157354935005710902589809259500117996982503679601132486140677013625335552533104471327456798955341220640782369529</span><br>c2= <span class="hljs-number">11734019659226247713821792108026989060106712358397514827024912309860741729438494689480531875833287268454669859568719053896346471360750027952226633173559594064466850413737504267807599435679616522026241111887294138123201104718849744300769676961585732810579953221056338076885840743126397063074940281522137794340822594577352361616598702143477379145284687427705913831885493512616944504612474278405909277188118896882441812469679494459216431405139478548192152811441169176134750079073317011232934250365454908280676079801770043968006983848495835089055956722848080915898151352242215210071011331098761828031786300276771001839021</span><br><br><br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_gong_N_def</span>(<span class="hljs-params">e1,e2,c1,c2,n</span>):  <span class="hljs-comment">#共模攻击函数</span><br>    e1, e2, c1, c2, n=<span class="hljs-built_in">int</span>(e1),<span class="hljs-built_in">int</span>(e2),<span class="hljs-built_in">int</span>(c1),<span class="hljs-built_in">int</span>(c2),<span class="hljs-built_in">int</span>(n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e1,e2:&quot;</span>,e1,e2)<br>    s = gmpy2.gcdext(e1, e2)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mpz:&quot;</span>,s)<br>    s1 = s[<span class="hljs-number">1</span>]<br>    s2 = s[<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">if</span> s1 &lt; <span class="hljs-number">0</span>:<br>        s1 = - s1<br>        c1 = gmpy2.invert(c1, n)<br>    <span class="hljs-keyword">elif</span> s2 &lt; <span class="hljs-number">0</span>:<br>        s2 = - s2<br>        c2 = gmpy2.invert(c2, n)<br>    m = (<span class="hljs-built_in">pow</span>(c1,s1,n) * <span class="hljs-built_in">pow</span>(c2 ,s2 ,n)) % n<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(m)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de</span>(<span class="hljs-params">c, e, n</span>): <span class="hljs-comment">#因为此时的m不是真正的m，而是m^k，所以对m^k进行爆破</span><br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> k&lt;<span class="hljs-number">1000</span>: <span class="hljs-comment">#指定k小于1000</span><br>        mk = c + n*k<br>        flag, true1 = gmpy2.iroot(mk, e)  <span class="hljs-comment">#返回的第一个数值为开方数，第二个数值为布尔型，可整除为true，可自行测试</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == true1:<br><br>            <span class="hljs-comment"># print(libnum.n2s(int(flag)))</span><br><br>​            <span class="hljs-keyword">return</span> flag<br>​        k += <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> e1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,e1e2):<br>​    <span class="hljs-keyword">if</span> e1e2%e1==<span class="hljs-number">0</span>:         <span class="hljs-comment">#爆破可整除的e</span><br>​        e2=e1e2//e1<br>​        c=rsa_gong_N_def(e1, e2, c1, c2, n)<br>​        e=gmpy2.gcd(e1,e2)<br>​        m1=de(c, e, n)<br>​        <span class="hljs-keyword">if</span> m1:  <span class="hljs-comment">#指定输出m1</span><br>​            <span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m1)))<br></code></pre></td></tr></table></figure><p>但是今天看到了出题人的博客（<a href="https://www.cnblogs.com/mumuhhh/p/18019200%EF%BC%89%EF%BC%8C%E5%8E%9F%E6%9D%A5%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%B0%86e1%EF%BC%8Ce2%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B05%E6%B6%88%E5%8E%BB%E4%B9%8B%E5%90%8E%E5%AF%B9%E8%A7%A3%E5%87%BA%E7%9A%84m%E5%BC%805%E6%AC%A1%E6%96%B9">https://www.cnblogs.com/mumuhhh/p/18019200），原来可以直接将e1，e2的最大公约数5消去之后对解出的m开5次方</a></p><h5 id="SICTF——gggcccddd"><a href="#SICTF——gggcccddd" class="headerlink" title="SICTF——gggcccddd"></a>SICTF——gggcccddd</h5><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">from</span> enc <span class="hljs-keyword">import</span> flag<br><br><br><br>m = bytes_to_long(flag)<br><br><br><br>p = getPrime(<span class="hljs-number">512</span>)<br><br>q = getPrime(<span class="hljs-number">512</span>)<br><br>n = p*q<br><br>e = <span class="hljs-number">65537</span><br><br>c1 = <span class="hljs-built_in">pow</span>(m,e,n)<br><br>c2 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">233</span>*m+<span class="hljs-number">9527</span>,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c1 = <span class="hljs-subst">&#123;c1&#125;</span>&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c2 = <span class="hljs-subst">&#123;c2&#125;</span>&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">n = 71451784354488078832557440841067139887532820867160946146462765529262021756492415597759437645000198746438846066445835108438656317936511838198860210224738728502558420706947533544863428802654736970469313030584334133519644746498781461927762736769115933249195917207059297145965502955615599481575507738939188415191</span><br><span class="hljs-string"></span><br><span class="hljs-string">c1 = 60237305053182363686066000860755970543119549460585763366760183023969060529797821398451174145816154329258405143693872729068255155086734217883658806494371105889752598709446068159151166250635558774937924668506271624373871952982906459509904548833567117402267826477728367928385137857800256270428537882088110496684</span><br><span class="hljs-string"></span><br><span class="hljs-string">c2 = 20563562448902136824882636468952895180253983449339226954738399163341332272571882209784996486250189912121870946577915881638415484043534161071782387358993712918678787398065688999810734189213904693514519594955522460151769479515323049821940285408228055771349670919587560952548876796252634104926367078177733076253</span><br><span class="hljs-string"></span><br><span class="hljs-string">e = 65537</span><br></code></pre></td></tr></table></figure><p>参考了大佬的这篇（<a href="https://tangcuxiaojikuai.xyz/post/39588.html#more%EF%BC%89%E5%86%99%E5%87%BA%E4%BA%86%E8%84%9A%E6%9C%AC%EF%BC%88%E4%B8%8D%E8%BF%87%E7%94%B1%E4%BA%8Ee%E8%BE%83%E5%A4%A7%E7%9A%84%E7%BC%98%E6%95%85%E9%9C%80%E8%A6%81%E8%B7%91%E7%9A%84%E6%97%B6%E9%97%B4%E9%9D%9E%E5%B8%B8%E9%95%BF%EF%BC%89">https://tangcuxiaojikuai.xyz/post/39588.html#more）写出了脚本（不过由于e较大的缘故需要跑的时间非常长）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">71451784354488078832557440841067139887532820867160946146462765529262021756492415597759437645000198746438846066445835108438656317936511838198860210224738728502558420706947533544863428802654736970469313030584334133519644746498781461927762736769115933249195917207059297145965502955615599481575507738939188415191</span><br><br>c1 = <span class="hljs-number">60237305053182363686066000860755970543119549460585763366760183023969060529797821398451174145816154329258405143693872729068255155086734217883658806494371105889752598709446068159151166250635558774937924668506271624373871952982906459509904548833567117402267826477728367928385137857800256270428537882088110496684</span><br><br>c2 = <span class="hljs-number">20563562448902136824882636468952895180253983449339226954738399163341332272571882209784996486250189912121870946577915881638415484043534161071782387358993712918678787398065688999810734189213904693514519594955522460151769479515323049821940285408228055771349670919587560952548876796252634104926367078177733076253</span><br><br>a1 = <span class="hljs-number">1</span><br>b1 = <span class="hljs-number">0</span><br>a2 = <span class="hljs-number">233</span><br>b2 = <span class="hljs-number">9527</span><br>elist =[<span class="hljs-number">65537</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">c1, c2, e, n</span>):<br>    PR.&lt;x&gt;=PolynomialRing(Zmod(n))<br>    g1 = (a1*x + b1)^e - c1<br>    g2 = (a2*x + b2)^e - c2<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">g1, g2</span>):<br>        <span class="hljs-keyword">while</span> g2:<br>            g1, g2 = g2, g1 % g2<br>        <span class="hljs-keyword">return</span> g1.monic()<br>    <span class="hljs-keyword">return</span> -gcd(g1, g2)[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> elist:<br>    m1 = attack(c1, c2, e, n)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">b&quot;SICTF&quot;</span> <span class="hljs-keyword">in</span> long_to_bytes(<span class="hljs-built_in">int</span>(m1))):<br>        flag = long_to_bytes(<span class="hljs-built_in">int</span>(m1))<br>        <span class="hljs-built_in">print</span>(flag)    <br></code></pre></td></tr></table></figure><p>想要优化算法的可以去看鸡块✌的rsa趣题（一），里面有介绍half—gcd算法，这个算法大幅度缩短了运行时间，大概40s左右就可以出结果，今天就先介绍这两题，下班！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网鼎杯青龙组 boom</title>
    <link href="/2023/10/14/%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84-boom/"/>
    <url>/2023/10/14/%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84-boom/</url>
    
    <content type="html"><![CDATA[<p>1.本来是密码题，但是既然给了exe那就re试试，查壳什么的我就不在此赘述了，直接描述过程，三部分组成，一部分解MD5，一部分解三元一次方程组，最后一部分二元一次方程</p><p><img src="/images/image-20231014204752971.png" alt="image-20231014204752971"></p><p><img src="/images/image-20231014204814256.png" alt="image-20231014204814256"></p><p><img src="/images/image-20231014204844802.png" alt="image-20231014204844802"></p><p>2.最后的flag由这三部部分解出来的值按照给出的格式拼接而成</p><p><img src="/images/image-20231014204951759.png" alt="image-20231014204951759"></p><p>3.剩下的就是解方程，全部用在线网站就好啦，欸嘿就是这么简单</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACTF2018 可怜的rsa</title>
    <link href="/2023/10/14/ACTF2018-%E5%8F%AF%E6%80%9C%E7%9A%84rsa(%E7%A7%81%E9%92%A5%E6%9C%BA%E5%AF%86)/"/>
    <url>/2023/10/14/ACTF2018-%E5%8F%AF%E6%80%9C%E7%9A%84rsa(%E7%A7%81%E9%92%A5%E6%9C%BA%E5%AF%86)/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件可以看到公钥，直接使用在线网站得到n和e</p><p><img src="/images/image-20231014203240844.png" alt="image-20231014203240844"></p><p>2.yafu分解得到pq</p><p><img src="/images/image-20231014203409108.png" alt="image-20231014203409108"></p><p>3.使用私钥解密</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs makefile">from Crypto.PublicKey import RSA<br><br>import gmpy2<br><br>import base64<br><br>from Crypto.Util.number import *<br><br>from Crypto.Cipher import PKCS1_OAEP<br><br> <br><br>e = 65537<br><br>n = 79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443<br><br>p =3133337<br><br>q=25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939<br><br>phi = (p-1)*(q-1)<br><br>d = gmpy2.invert(e,phi)<br><br>text = &#x27;GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/6/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA==&#x27;<br><br>c_bytes =base64.b64decode(text)<br><br>rsa_components=(n,e,int(d),p,q)<br><br>arsa=RSA.construct(rsa_components)<br><br>rsakey = RSA.importKey(arsa.exportKey())<br><br>rsakey = PKCS1_OAEP.new(rsakey)<br><br>decrypted = rsakey.decrypt(c_bytes)<br><br>print(decrypted)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACTF2018 你能看出这是什么密码码</title>
    <link href="/2023/10/14/ACTF2018-%E4%BD%A0%E8%83%BD%E7%9C%8B%E5%87%BA%E8%BF%99%E6%98%AF%E4%BB%80%E4%B9%88%E5%AF%86%E7%A0%81%E7%A0%81/"/>
    <url>/2023/10/14/ACTF2018-%E4%BD%A0%E8%83%BD%E7%9C%8B%E5%87%BA%E8%BF%99%E6%98%AF%E4%BB%80%E4%B9%88%E5%AF%86%E7%A0%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件发现是经典的rsa加密，直接上脚本吧</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import binascii<br>import gmpy2<br>import binascii<br><br><span class="hljs-attribute">p</span>=32968350940699980657930803613151404473574304024691423777313774889908862596593974505408563479347203657944730457083838853799946370868164530123853574071511042506373967<br><span class="hljs-attribute">q</span>=2880152120462299039547844713611759800616693058487756771628124899159366904931022178508385592572818981251437302744086103000323987445642079008931937<br><span class="hljs-attribute">c</span>=79200636304478271014515653428599205348546363880946576416664212880828226632721700716018261410389126930860598324371523316772928996360356422063555113754727289043115498759013305194277072343492062380609722125010442330717505742205680602598802403784826674446752282126860193320062982428054987016007285150027446362806<br><span class="hljs-attribute">e</span>=65537<br><br><span class="hljs-attribute">n</span>=p*q<br>phi_n=(q-1)*(p-1)<br><span class="hljs-attribute">d</span>=gmpy2.invert(e,phi_n)<br><span class="hljs-attribute">m</span>=gmpy2.powmod(c,d,n)<br><br><span class="hljs-built_in">print</span>(binascii.unhexlify(hex(m)[9:]))<br></code></pre></td></tr></table></figure><p>2.运行得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf yxx</title>
    <link href="/2023/10/14/buuctf-yxx/"/>
    <url>/2023/10/14/buuctf-yxx/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件很自然能想到异性相吸那道题目，一样的手法处理一下</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c">a=&#x27;<span class="hljs-number">01101100011011</span><span class="hljs-number">11011101100110</span><span class="hljs-number">01010110110001</span><span class="hljs-number">10111101110110</span><span class="hljs-number">01100101011011</span><span class="hljs-number">00011011110111</span><span class="hljs-number">01100110010101</span><span class="hljs-number">10110001101111</span><span class="hljs-number">01110110011001</span><span class="hljs-number">01011011000110</span><span class="hljs-number">11110111011001</span><span class="hljs-number">10010101101100</span><span class="hljs-number">01101111011101</span><span class="hljs-number">10011001010110</span><span class="hljs-number">11000110111101</span><span class="hljs-number">11011001100101</span><span class="hljs-number">01101100011011</span><span class="hljs-number">11011101100110</span><span class="hljs-number">0101</span>&#x27;<br>b=&#x27;<span class="hljs-number">00001010000000</span><span class="hljs-number">11000101110000</span><span class="hljs-number">00100101011000</span><span class="hljs-number">00000100010101</span><span class="hljs-number">00010001000010</span><span class="hljs-number">10000101000000</span><span class="hljs-number">11100000101000</span><span class="hljs-number">01111000110000</span><span class="hljs-number">00001110000010</span><span class="hljs-number">10000111100011</span><span class="hljs-number">00000000111000</span><span class="hljs-number">00101000011110</span><span class="hljs-number">00110000000101</span><span class="hljs-number">00000011000001</span><span class="hljs-number">10010000110100</span><span class="hljs-number">01111100010000</span><span class="hljs-number">00001110000001</span><span class="hljs-number">10000000110001</span><span class="hljs-number">1000</span>&#x27;<br>c=&#x27;&#x27;<br><br>for i in range(len(a)):<br>if(a[i]==b[i]):<br>c+=&#x27;0&#x27;<br>else:<br>c+=&#x27;1&#x27;<br>print(c)<br></code></pre></td></tr></table></figure><p>2.二进制转字符串</p><p><img src="/images/image-20231014195006028.png" alt="image-20231014195006028"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf 异性相吸</title>
    <link href="/2023/10/14/buuctf-%E5%BC%82%E6%80%A7%E7%9B%B8%E5%90%B8/"/>
    <url>/2023/10/14/buuctf-%E5%BC%82%E6%80%A7%E7%9B%B8%E5%90%B8/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件后，没啥头绪，试试01editor，先把明文和密文转换成2进制异或一下</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c">a = &#x27;<span class="hljs-number">01100001011100</span><span class="hljs-number">11011000010110</span><span class="hljs-number">01000111001101</span><span class="hljs-number">10000101110011</span><span class="hljs-number">01100100011000</span><span class="hljs-number">01011100110110</span><span class="hljs-number">01000110000101</span><span class="hljs-number">11001101100100</span><span class="hljs-number">01100001011100</span><span class="hljs-number">11011001000110</span><span class="hljs-number">00010111001101</span><span class="hljs-number">10010001100001</span><span class="hljs-number">01110011011001</span><span class="hljs-number">00011000010111</span><span class="hljs-number">00110110010001</span><span class="hljs-number">10000101110011</span><span class="hljs-number">01100100011000</span><span class="hljs-number">01011100110110</span><span class="hljs-number">01000111000101</span><span class="hljs-number">11011101100101</span><span class="hljs-number">01110011011100</span><span class="hljs-number">0101100110</span>&#x27;<br>b = &#x27;<span class="hljs-number">00000111000111</span><span class="hljs-number">11000000000000</span><span class="hljs-number">00110000100000</span><span class="hljs-number">00010000010010</span><span class="hljs-number">01010101000000</span><span class="hljs-number">11000100000101</span><span class="hljs-number">01000101100001</span><span class="hljs-number">00101101011100</span><span class="hljs-number">01011000010010</span><span class="hljs-number">10010101100101</span><span class="hljs-number">00110100010001</span><span class="hljs-number">01001000000011</span><span class="hljs-number">01000100000000</span><span class="hljs-number">10010110000100</span><span class="hljs-number">01100000011001</span><span class="hljs-number">01010001000111</span><span class="hljs-number">00000101010101</span><span class="hljs-number">10010001110101</span><span class="hljs-number">01110100010000</span><span class="hljs-number">01001001011101</span><span class="hljs-number">01001010000101</span><span class="hljs-number">0000011011</span>&#x27;<br>c = &#x27;&#x27;<br><br>for i in range(len(a)):<br>    if a[i] == b[i]:<br>        c += &#x27;0&#x27;<br>    else:<br>        c += &#x27;1&#x27;<br>print(c)<br></code></pre></td></tr></table></figure><p>2.运行得到一串二进制编码</p><p><img src="/images/image-20231014194108751.png" alt="image-20231014194108751"></p><p>3.将2进制编码转换成字符串即可</p><p><img src="/images/image-20231014194600808.png" alt="image-20231014194600808"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BJD2020_easyrsa</title>
    <link href="/2023/10/14/BJD2020-easyrsa/"/>
    <url>/2023/10/14/BJD2020-easyrsa/</url>
    
    <content type="html"><![CDATA[<p>1.先打开文件，看到c、z、n、e4个数据，尝试分解n失败，选择找出z和pq的关系<br>$$<br>z &#x3D; p^2 + q^2<br>$$<br>那么则有<br>$$<br>p + q &#x3D; sqrt(z + 2 * n)<br>$$</p><p>$$<br>p - q &#x3D; sqrt(z - 2 * n)<br>$$<br>2.写脚本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> gmpy2<br><span class="hljs-attribute">import</span> binascii<br><span class="hljs-attribute">e</span>=<span class="hljs-number">65537</span><br><span class="hljs-attribute">c</span>=<span class="hljs-number">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span><br><span class="hljs-attribute">z</span>=<span class="hljs-number">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span><br><span class="hljs-attribute">n</span>=<span class="hljs-number">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span><br><br><span class="hljs-attribute">p</span>=(gmpy2.iroot(z+<span class="hljs-number">2</span>*n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]+gmpy2.iroot(z-<span class="hljs-number">2</span>*n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])//<span class="hljs-number">2</span><br><span class="hljs-attribute">print</span>(n%p==<span class="hljs-number">0</span>)<br><span class="hljs-attribute">q</span>=n//p<br><span class="hljs-attribute">d</span>=gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><span class="hljs-attribute">m</span>=gmpy2.powmod(c,d,n)<br><span class="hljs-attribute">import</span> binascii<br><span class="hljs-attribute">print</span>(binascii.unhexlify(hex(m)[<span class="hljs-number">2</span>:]))<br></code></pre></td></tr></table></figure><p>运行即可得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf SameMod</title>
    <link href="/2023/10/14/buuctf-SameMod/"/>
    <url>/2023/10/14/buuctf-SameMod/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件，发现为如图所示的几组数据</p><p><img src="/images/image-20231014185423491.png" alt="image-20231014185423491"></p><p>2.经过观察，感觉是共模攻击，上脚本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import gmpy2<br><br>n =6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249<br><br>c1 = 3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349<br><br>c2 = 5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535<br><br>e1 = 773<br>e2 = 839<br><br>s = gmpy2.gcdext(e1,e2)<br>a = s[1]<br>b = s[2]<br><br><span class="hljs-keyword">if</span> a&lt;0:<br>    a = -a<br>    c1 = gmpy2.invert(c1,n)<br><span class="hljs-keyword">else</span>:<br>    b = -b<br>    c2 = gmpy2.invert(c2,n)<br><br>m = (gmpy2.powmod(c1,a,n)*gmpy2.powmod(c2,b,n))%n<br><br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-attribute">m</span>=str(m)<br><span class="hljs-attribute">flag</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attribute">i</span>=0<br><span class="hljs-keyword">while</span> i &lt; len(m):<br>    <span class="hljs-keyword">if</span> m[i]==<span class="hljs-string">&#x27;1&#x27;</span>:<br>        <span class="hljs-attribute">c</span>=chr(int(m[i:i+3]))<br>        i+=3<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-attribute">c</span>=chr(int(m[i:i+2]))<br>        i+=2<br>    flag+=c<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>3.m不转16进制而转ASCII码的原因时输出数字后的m值为10210897103，正好对应flag的ASCII码值</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf 一张碟报</title>
    <link href="/2023/10/10/buuctf-%E4%B8%80%E5%BC%A0%E7%A2%9F%E6%8A%A5/"/>
    <url>/2023/10/10/buuctf-%E4%B8%80%E5%BC%A0%E7%A2%9F%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<p>1.文件打开是两部分文章，根本没思路</p><p><img src="/images/image-20231010223610229.png" alt="image-20231010223610229"></p><p>2.查询过后得知为脑洞题，两段文章存在一一对应关系，最后的作业解出即可</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sas">txt1 = <span class="hljs-string">&quot;今天上午，朝歌区梆子公司决定，在每天三更天不亮免费在各大小区门口设卡为全城提供二次震耳欲聋的敲更提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的符号是前进。为此，全区老人都蹲在该公司东边树丛合力抵制，不给公司人员放行，场面混乱。李罗鹰住进朝歌区五十年了，人称老鹰头，几年孙子李虎南刚从东北当猎户回来，每月还寄回来几块鼹鼠干。李罗鹰当年遇到的老婆是朝歌一枝花，所以李南虎是长得非常秀气的一个汉子。李罗鹰表示：无论梆子公司做的对错，反正不能打扰他孙子睡觉，子曰：‘睡觉乃人之常情’。梆子公司这是连菩萨睡觉都不放过啊。李南虎表示：梆子公司智商捉急，小心居民猴急跳墙！这三伏天都不给睡觉，这不扯淡么！到了中午人群仍未离散，更有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李南虎仍旧表示爷爷年纪大了，睡不好对身体不好。&quot;</span><br>txt2 = <span class="hljs-string">&quot;喵天上午，汪歌区哞叽公司决定，在每天八哇天不全免费在各大小区门脑设卡为全城提供双次震耳欲聋的敲哇提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的编号是前进。为此，全区眠人都足在该公司流边草丛合力抵制，不给公司人员放行，场面混乱。李罗鸟住进汪歌区五十年了，人称眠鸟顶，几年孙叽李熬值刚从流北当屁户回来，每月还寄回来几块报信干。李罗鸟当年遇到的眠婆是汪歌一枝花，所以李值熬是长得非常秀气的一个汉叽。李罗鸟表示：无论哞叽公司做的对错，反正不能打扰他孙叽睡觉，叽叶：‘睡觉乃人之常情’。哞叽公司这是连衣服睡觉都不放过啊。李值熬表示：哞叽公司智商捉急，小心居民猴急跳墙！这八伏天都不给睡觉，这不扯淡么！到了中午人群仍未离散，哇有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李值熬仍旧表示爷爷年纪大了，睡不好对身体不好。&quot;</span><br>txt3 = <span class="hljs-string">&#x27;喵汪哞叽双哇顶，眠鸟足屁流脑，八哇报信断流脑全叽，眠鸟进北脑上草，八枝遇孙叽，孙叽对熬编叶：值天衣服放鸟捉猴顶。鸟对：北汪罗汉伏熬乱天门。合编放行，卡编扯呼。人离烧草，报信归洞，孙叽找爷爷。&#x27;</span><br><br>c = <span class="hljs-string">&#x27;&#x27;</span><br>m = <span class="hljs-string">&#x27;&#x27;</span><br><br>for i,j <span class="hljs-keyword">in</span> zip(txt1,txt2):<br>    <span class="hljs-keyword">if</span> i != j:<br>      c += j<br>      m += i <br><br>for i <span class="hljs-keyword">in</span> txt3:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> c:<br>        pr<span class="hljs-meta">int</span>(m[c.<span class="hljs-meta">index</span>(i)],<span class="hljs-keyword">end</span> = <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        pr<span class="hljs-meta">int</span>(i,<span class="hljs-keyword">end</span> = <span class="hljs-string">&#x27;&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure><p>3.运行后得到</p><p><img src="/images/image-20231010223831683.png" alt="image-20231010223831683"></p><p>4.人说的话即为flag：南天菩萨放鹰捉猴头</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACTF2020 CRYPTO-rsa3</title>
    <link href="/2023/10/10/ACTF2020-CRYPTO-rsa3/"/>
    <url>/2023/10/10/ACTF2020-CRYPTO-rsa3/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件，分析文件后，输出的两个数就是n和c</p><p><img src="/images/image-20231010222037294.png" alt="image-20231010222037294"></p><p>2.使用在线网站分解n得到pq（不知道为什么yafu不行），接下来按正常思路编写脚本就好</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import gmpy2<br><br>import binascii<br><br>n = 177606504836499246970959030226871608885969321778211051080524634084516973331441644993898029573612290095853069264036530459253652875586267946877831055147546910227100566496658148381834683037366134553848011903251252726474047661274223137727688689535823533046778793131902143444408735610821167838717488859902242863683<br><br>c = 1457390378511382354771000540945361168984775052693073641682375071407490851289703070905749525830483035988737117653971428424612332020925926617395558868160380601912498299922825914229510166957910451841730028919883807634489834128830801407228447221775264711349928156290102782374379406719292116047581560530382210049<br><br>e = 65537<br><br>p = 13326909050357447643526585836833969378078147057723054701432842192988717649385731430095055622303549577233495793715580004801634268505725255565021519817179231<br><br>q = 13326909050357447643526585836833969378078147057723054701432842192988717649385731430095055622303549577233495793715580004801634268505725255565021519817179293<br><br>phi = (p-1)*(q-1)<br><br>d = gmpy2.invert(e,phi)<br><br>m = pow(c,d,n)<br><br><span class="hljs-section">print(binascii.unhexlify(hex(m)[2:]))</span><br></code></pre></td></tr></table></figure><p>3.运行脚本得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GWCTF2019_babyrsa</title>
    <link href="/2023/10/10/GWCTF2019-babyrsa/"/>
    <url>/2023/10/10/GWCTF2019-babyrsa/</url>
    
    <content type="html"><![CDATA[<p>1.分析代码，非常容易知道本道题目的解题思路，分解n，得到d，通过方程组求解F1和F2</p><p>下面给出解题脚本</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import gmpy2<br>from gmpy2 import *<br>from Crypto.Util.number import *<br>import sympy<br><br>e = 0x10001<br>n = 636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163<br>m1 = 90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239<br>m2 = 487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546<br><br>n=mpz(636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163)<br><br>q = next_prime(iroot(n,2)[0])<br>p = n//q<br><br>d = gmpy2.invert(e, (q-1)*(p-1))<span class="hljs-comment">#计算逆元</span><br><br>c1 = gmpy2.powmod(m1,d,n)<span class="hljs-comment">#解密</span><br>c2 = gmpy2.powmod(m2,d,n)<span class="hljs-comment">#解密</span><br><br><span class="hljs-comment">#解方程组c1 = F1 + F2</span><br><br>c2 = pow(F1, 3) + pow(F2, 3)<br><br>F1 = sympy.Symbol(&#x27;F1&#x27;)<span class="hljs-comment">#方程组定义变量</span><br>F2 = sympy.Symbol(&#x27;F2&#x27;)<br>f1 = F1+F2-c1<br>f2 = pow(F1,3)+pow(F2,3)-c2<br>result = sympy.solve([f1,f2],[F1,F2])<br><br>flag1 = long_to_bytes(result[0][1])<br>flag2 = long_to_bytes(result[0][0])<br>flag  = flag1 + flag2<br><br>print(flag)<br></code></pre></td></tr></table></figure><p>2.运行脚本即可得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf crypto [MRCTF2020]keyboard</title>
    <link href="/2023/09/24/buuctf-crypto-MRCTF2020-keyboard/"/>
    <url>/2023/09/24/buuctf-crypto-MRCTF2020-keyboard/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件</p><p><img src="/images/image-20230924230938636.png" alt="image-20230924230938636"></p><p>2.keyboard应该是对应九键解密，然后对应解密就行</p><p>flag：{mobilephone}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf crypto [WUSTCTF2020]babyrsa</title>
    <link href="/2023/09/24/buuctf-crypto-WUSTCTF2020-babyrsa/"/>
    <url>/2023/09/24/buuctf-crypto-WUSTCTF2020-babyrsa/</url>
    
    <content type="html"><![CDATA[<p>1.这道题比较简单，打开之后是n，e，c三个数，分解一下，然后脚本解一下</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import gmpy2 <br>import binascii<br><br>c = 28767758880940662779934612526152562406674613203406706867456395986985664083182<br>e =  65537<br>p = 189239861511125143212536989589123569301<br>q =  386123125371923651191219869811293586459<br><br>phi = (p-1)*(q-1)<br>d = gmpy2.invert(e, phi)<br><br>m = gmpy2.powmod(c,d,p*q)<br>print(hex(m))<br></code></pre></td></tr></table></figure><p>2.16进制转一下得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf crypto [BJDCTF2020]signin</title>
    <link href="/2023/09/23/buuctf-crypto-BJDCTF2020-signin/"/>
    <url>/2023/09/23/buuctf-crypto-BJDCTF2020-signin/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件</p><p><img src="/images/image-20230923201942220.png" alt="image-20230923201942220"></p><p>2.感觉像16进制转字符串，在线解密试试看</p><p><img src="/images/image-20230923202756063.png" alt="image-20230923202756063"></p><p>3.轻松的解决了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf crypto [BJDCTF2020]rsa_output</title>
    <link href="/2023/09/23/buuctf-crypto-BJDCTF2020-rsa-output/"/>
    <url>/2023/09/23/buuctf-crypto-BJDCTF2020-rsa-output/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件</p><p><img src="/images/image-20230923200134680.png" alt="image-20230923200134680"></p><p>2.发现两组message（即为c），观察花括号内的数字（即为n），完全一致，推测为共模攻击，写出共模攻击脚本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import gmpy2<br>import libnum<br><br><span class="hljs-attribute">n</span>=21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111<br><span class="hljs-attribute">e1</span>=2767<br><span class="hljs-attribute">c1</span>=20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599<br><span class="hljs-attribute">n2</span>=21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111<br><span class="hljs-attribute">e2</span>=3659<br><span class="hljs-attribute">c2</span>=11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227<br><br><br><span class="hljs-comment">#共模攻击</span><br><span class="hljs-comment">#共模攻击函数</span><br>def rsa_gong_N_def(e1,e2,c1,c2,n):<br>    e1, e2, c1, c2, <span class="hljs-attribute">n</span>=int(e1),int(e2),int(c1),int(c2),int(n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e1,e2:&quot;</span>,e1,e2)<br>    <span class="hljs-built_in">print</span>(gmpy2.gcd(e1,e2))<br>    s = gmpy2.gcdext(e1, e2)<br>    <span class="hljs-built_in">print</span>(s)<br>    s1 = s[1]<br>    s2 = s[2]<br>    <span class="hljs-keyword">if</span> s1 &lt; 0:<br>        s1 = - s1<br>        c1 = gmpy2.invert(c1, n)<br>    elif s2 &lt; 0:<br>        s2 = - s2<br>        c2 = gmpy2.invert(c2, n)<br>    m = (pow(c1,s1,n) * pow(c2 ,s2 ,n)) % n<br>    return int(m)<br><br>m = rsa_gong_N_def(e1,e2,c1,c2,n)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(libnum.n2s(int(m)).decode())<br></code></pre></td></tr></table></figure><p>3.运行得到flag</p><p><img src="/images/image-20230923201129374.png" alt="image-20230923201129374"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf crypto 传感器</title>
    <link href="/2023/09/22/buuctf-crypto-%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    <url>/2023/09/22/buuctf-crypto-%E4%BC%A0%E6%84%9F%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件</p><p><img src="/images/image-20230922213201400.png" alt="image-20230922213201400"></p><p>2.根据编码中只有5.6.9.A，应该是曼彻斯特编码，可以采取脚本解密，也可以使用工具解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">cipher=<span class="hljs-string">&#x27;5555555595555A65556AA696AA6666666955&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">iee</span>(<span class="hljs-params">cipher</span>):<br>    tmp=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher)):<br>        a=<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;0x&#x27;</span>+cipher[i]))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">4</span>)<br>        tmp=tmp+a[<span class="hljs-number">1</span>]+a[<span class="hljs-number">3</span>]<br>        <span class="hljs-built_in">print</span>(tmp)<br>    plain=[<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(tmp[i:i+<span class="hljs-number">8</span>][::-<span class="hljs-number">1</span>],<span class="hljs-number">2</span>))[<span class="hljs-number">2</span>:] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(tmp),<span class="hljs-number">8</span>)]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(plain).upper())<br><br>iee(cipher)<br></code></pre></td></tr></table></figure><p>3.运行得出结果</p><p><img src="/images/image-20230922213421770.png" alt="image-20230922213421770"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf crypto [BJDCTF2020]RSA</title>
    <link href="/2023/09/22/buuctf-crypto-BJDCTF2020-RSA/"/>
    <url>/2023/09/22/buuctf-crypto-BJDCTF2020-RSA/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件</p><p><img src="/images/image-20230922212056893.png" alt="image-20230922212056893"></p><p>2.分析一下代码，先爆破一下e</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">n = <span class="hljs-number">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span><br>temp = <span class="hljs-number">381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(pow(<span class="hljs-number">294</span>,<span class="hljs-number">52361</span>,n)</span></span>)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>x9900,<span class="hljs-number">0</span>x10001):<br>    <span class="hljs-built_in">if</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">294</span>,<span class="hljs-selector-tag">i</span>,n) == temp):<br>        <span class="hljs-built_in">print</span>(i)<br>        break<br></code></pre></td></tr></table></figure><p>3.得到e为52361，那么根据给出的两个n和c求出最大公约数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">n0 = <span class="hljs-number">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span><br>c0 = <span class="hljs-number">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120</span><br>n1 = <span class="hljs-number">12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047</span><br>c1 = <span class="hljs-number">979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721</span><br>n=<span class="hljs-selector-attr">[n0,n1]</span><br>c=<span class="hljs-selector-attr">[c0,c1]</span><br><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(n)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(n)):<br>        <span class="hljs-built_in">if</span>(i!=j):<br>            <span class="hljs-built_in">if</span>(<span class="hljs-built_in">gcd</span>(n<span class="hljs-selector-attr">[i]</span>,n<span class="hljs-selector-attr">[j]</span>)!=<span class="hljs-number">1</span>):   #对不同的n进行 欧几德得 算法，以求出最大公约数<br>                <span class="hljs-built_in">print</span>(<span class="hljs-selector-tag">i</span>,j)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>,<span class="hljs-built_in">gcd</span>(n<span class="hljs-selector-attr">[i]</span>,n<span class="hljs-selector-attr">[j]</span>))<br><br><br></code></pre></td></tr></table></figure><p>3.求出最大公约数，带入脚本就行</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lisp">from gmpy2 import *<br>import binascii<br>n0 = <span class="hljs-number">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span><br>c0 = <span class="hljs-number">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120</span><br>p = mpz(<span class="hljs-number">99855353761764939308265951492116976798674681282941462516956577712943717850048051273358745095906207085170915794187749954588685850452162165059831749303473106541930948723000882713453679904525655327168665295207423257922666721077747911860159181041422993030618385436504858943615630219459262419715816361781062898911</span>)<br>q = n0 // p<br>phi = (<span class="hljs-name">q-1</span>)*(<span class="hljs-name">p-1</span>)<br>e = <span class="hljs-number">52361</span><br>d = invert(<span class="hljs-name">e</span>,phi)<br>print(<span class="hljs-name">binascii</span>.unhexlify(<span class="hljs-name">hex</span>(<span class="hljs-name">pow</span>(<span class="hljs-name">c0</span>,d,n0))[<span class="hljs-number">2</span>:]))<br></code></pre></td></tr></table></figure><p>4.运行得到结果</p><p><img src="/images/image-20230922212701281.png" alt="image-20230922212701281"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf crypto 天干地支+甲子</title>
    <link href="/2023/09/20/buuctf-crypto-%E5%A4%A9%E5%B9%B2%E5%9C%B0%E6%94%AF-%E7%94%B2%E5%AD%90/"/>
    <url>/2023/09/20/buuctf-crypto-%E5%A4%A9%E5%B9%B2%E5%9C%B0%E6%94%AF-%E7%94%B2%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件</p><p><img src="/images/image-20230920200928327.png" alt="image-20230920200928327"></p><p>2。对照六十甲子表ASCII换表一下，但是显然不对，那就是六十甲子对照表得到数据之后加60然后ASCII码转字符</p><p><img src="/images/6149b308e4294de58e296970810e23c4.png" alt="img"></p><p>3.得到flag：Goodjob</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf crypto RSA4</title>
    <link href="/2023/09/20/buuctf-crypto-RSA4/"/>
    <url>/2023/09/20/buuctf-crypto-RSA4/</url>
    
    <content type="html"><![CDATA[<p>1.打开文件，看到三组n和c</p><p><img src="/images/image-20230920200250968.png" alt="image-20230920200250968"></p><p>2.中国剩余定理，直接写脚本就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span>  binascii<br><br><span class="hljs-comment">#利用中国剩余定理求解同余方程，aList：余数，mList：模数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CRT</span>(<span class="hljs-params">aList, mList</span>):<br>    M = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mList:<br>        M = M * i   <span class="hljs-comment">#计算M = ∏ mi</span><br>    <span class="hljs-comment">#print(M)</span><br>    x = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mList)):<br>        Mi = M // mList[i]   <span class="hljs-comment">#计算Mi</span><br>        Mi_inverse = gmpy2.invert(Mi, mList[i]) <span class="hljs-comment">#计算Mi的逆元</span><br>        x += aList[i] * Mi * Mi_inverse <span class="hljs-comment">#构造x各项</span><br>    x = x % M<br>    <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment">#========== n c ==========</span><br>    n1 = <span class="hljs-string">&quot;331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004&quot;</span><br>    c1 = <span class="hljs-string">&quot;310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243&quot;</span><br>    n2 = <span class="hljs-string">&quot;302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114&quot;</span><br>    c2 = <span class="hljs-string">&quot;112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344&quot;</span><br>    n3 = <span class="hljs-string">&quot;332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323&quot;</span><br>    c3 = <span class="hljs-string">&quot;10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242&quot;</span><br>    <br></code></pre></td></tr></table></figure><pre><code class="hljs">cList = [int(c1,5), int(c2,5), int(c3,5)]nList = [int(n1,5), int(n2,5), int(n3,5)]m_e = CRT(cList, nList) #计算m^efor e in range(1, 10):  #遍历e求解    m, f = gmpy2.iroot(m_e, e) #m_e开e次根    print(&quot;加密指数e = %d：&quot;%e)    m = hex(m)[2:]    if len(m)%2 == 1:        m = m + &#39;0&#39; #binascii.unhexlify()参数长度必须为偶数，因此做一下处理    flag = binascii.unhexlify(m)    print(flag)</code></pre><p>3.运行得到答案</p><p><img src="/images/image-20230920200558251.png" alt="image-20230920200558251"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/18/buuctf%20cry%20%E3%80%90%5BNCTF2019%5DKeyboard%E3%80%91%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/09/18/buuctf%20cry%20%E3%80%90%5BNCTF2019%5DKeyboard%E3%80%91%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>buuctf cry 【[NCTF2019]Keyboard】解题记录</p><p>1.打开文件</p><p><img src="/images/image-20230918202044977.png" alt="image-20230918202044977"></p><p>2.观察不难发现，所有字母都在同一排，o对应的是9，三个o大概对应九宫格的9的第三个字母</p><p>我直接对应一个个解密</p><p>flag{youaresosmartthatthisisjustapieceofcake}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/17/title%EF%BC%9Abuuctf%20crypto%20%E3%80%90%5BHDCTF2019%5Dbbbbbbrsa%E3%80%91/"/>
    <url>/2023/09/17/title%EF%BC%9Abuuctf%20crypto%20%E3%80%90%5BHDCTF2019%5Dbbbbbbrsa%E3%80%91/</url>
    
    <content type="html"><![CDATA[<p>buuctf crypto 【[HDCTF2019]bbbbbbrsa】</p><p>1.打开文件</p><p><img src="/images/image-20230917202323941.png" alt="image-20230917202323941"></p><p><img src="/images/image-20230917202422905.png" alt="image-20230917202422905"></p><p>2.注意一下，base32其实不是真的base32编码，只是一个名字，其实是base64编码，还有c是倒序的，写个脚本跑一下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import *<br>import gmpy2<br><span class="hljs-attribute">p</span>=177077389675257695042507998165006460849<br><span class="hljs-attribute">n</span>=37421829509887796274897162249367329400988647145613325367337968063341372726061<br><span class="hljs-attribute">q</span>=n//p<br><span class="hljs-attribute">c</span>=2373740699529364991763589324200093466206785561836101840381622237225512234632<br>phi=(q-1)*(p-1)<br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> range(50000,70000):<br>    <span class="hljs-keyword">if</span> gmpy2.gcd(e,phi)==1:<br>        <span class="hljs-attribute">d</span>=gmpy2.invert(e,phi)<br>        <span class="hljs-attribute">m</span>=pow(c,d,n)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> str(long_to_bytes(m)):<br>            <span class="hljs-built_in">print</span>(str(long_to_bytes(m))[2:-1])<br></code></pre></td></tr></table></figure><p>3.运行看看结果</p><p><img src="/images/image-20230917203727593.png" alt="image-20230917203727593"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/16/buuctf%20crypto%20%E3%80%90%E8%BF%99%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%91%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/09/16/buuctf%20crypto%20%E3%80%90%E8%BF%99%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%91%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>buuctf crypto 【这是什么】解题记录</p><p>1.文件后缀名修改为txt并打开</p><p><img src="/images/image-20230916124347577.png" alt="image-20230916124347577"></p><p>2.JSfuck编码，解码一下（<a href="https://www.bugku.com/tools/jsfuck/#%EF%BC%89">https://www.bugku.com/tools/jsfuck/#）</a></p><p><img src="/images/image-20230916124734253.png" alt="image-20230916124734253"></p><p>3.得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/16/buuctf%20crypto%20%E3%80%90rot%E3%80%91%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/09/16/buuctf%20crypto%20%E3%80%90rot%E3%80%91%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="buuctf-crypto-【rot】解题记录"><a href="#buuctf-crypto-【rot】解题记录" class="headerlink" title="buuctf crypto 【rot】解题记录"></a>buuctf crypto 【rot】解题记录</h3><p>1.打开文件，看到密文</p><p><img src="/images/image-20230916093350576.png" alt="image-20230916093350576"></p><p>2.rot常见的位移数是13，直接ASCII码减去13运行一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">83</span>,<span class="hljs-number">89</span>,<span class="hljs-number">78</span>,<span class="hljs-number">84</span>,<span class="hljs-number">45</span>,<span class="hljs-number">86</span>,<span class="hljs-number">96</span>,<span class="hljs-number">45</span>,<span class="hljs-number">115</span>,<span class="hljs-number">121</span>,<span class="hljs-number">110</span>,<span class="hljs-number">116</span>,<span class="hljs-number">136</span>,<span class="hljs-number">132</span>,<span class="hljs-number">132</span>,<span class="hljs-number">132</span>,<span class="hljs-number">108</span>,<span class="hljs-number">128</span>,<span class="hljs-number">117</span>,<span class="hljs-number">118</span>,<span class="hljs-number">134</span>,<span class="hljs-number">110</span>,<span class="hljs-number">123</span>,<span class="hljs-number">111</span>,<span class="hljs-number">110</span>,<span class="hljs-number">127</span>,<span class="hljs-number">108</span>,<span class="hljs-number">112</span>,<span class="hljs-number">124</span>,<span class="hljs-number">122</span>,<span class="hljs-number">108</span>,<span class="hljs-number">118</span>,<span class="hljs-number">128</span>,<span class="hljs-number">108</span>,<span class="hljs-number">131</span>,<span class="hljs-number">114</span>,<span class="hljs-number">127</span>,<span class="hljs-number">134</span>,<span class="hljs-number">108</span>,<span class="hljs-number">116</span>,<span class="hljs-number">124</span>,<span class="hljs-number">124</span>,<span class="hljs-number">113</span>,<span class="hljs-number">108</span>,<span class="hljs-number">76</span>,<span class="hljs-number">76</span>,<span class="hljs-number">76</span>,<span class="hljs-number">76</span>,<span class="hljs-number">138</span>,<span class="hljs-number">23</span>,<span class="hljs-number">90</span>,<span class="hljs-number">81</span>,<span class="hljs-number">66</span>,<span class="hljs-number">71</span>,<span class="hljs-number">64</span>,<span class="hljs-number">69</span>,<span class="hljs-number">114</span>,<span class="hljs-number">65</span>,<span class="hljs-number">112</span>,<span class="hljs-number">64</span>,<span class="hljs-number">66</span>,<span class="hljs-number">63</span>,<span class="hljs-number">69</span>,<span class="hljs-number">61</span>,<span class="hljs-number">70</span>,<span class="hljs-number">114</span>,<span class="hljs-number">62</span>,<span class="hljs-number">66</span>,<span class="hljs-number">61</span>,<span class="hljs-number">62</span>,<span class="hljs-number">69</span>,<span class="hljs-number">67</span>,<span class="hljs-number">70</span>,<span class="hljs-number">63</span>,<span class="hljs-number">61</span>,<span class="hljs-number">110</span>,<span class="hljs-number">110</span>,<span class="hljs-number">112</span>,<span class="hljs-number">64</span>,<span class="hljs-number">68</span>,<span class="hljs-number">62</span>,<span class="hljs-number">70</span>,<span class="hljs-number">61</span>,<span class="hljs-number">112</span>,<span class="hljs-number">111</span>,<span class="hljs-number">112</span>]<br>b = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    i = i-<span class="hljs-number">13</span><br>    b.append(i)<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> b:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(j),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure><p>3.运行一下</p><p><img src="/images/image-20230916093656435.png" alt="image-20230916093656435"></p><p>4.需要爆破得到后面4位，写个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br>demo=<span class="hljs-string">&#x27;flag&#123;www_shiyanbar_com_is_very_good_&#x27;</span><br>check = <span class="hljs-string">&#x27;38e4c352809e150186920aac37190cbc&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>            <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>                tmp = demo + <span class="hljs-built_in">chr</span>(i) + <span class="hljs-built_in">chr</span>(j) + <span class="hljs-built_in">chr</span>(k) + <span class="hljs-built_in">chr</span>(m) + <span class="hljs-string">&#x27;&#125;&#x27;</span><br>                <span class="hljs-built_in">hash</span> = hashlib.md5(tmp.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)).hexdigest()<br>                <span class="hljs-keyword">if</span> check == <span class="hljs-built_in">hash</span>:<br>                    <span class="hljs-built_in">print</span>(tmp)<br>                    exit()<br></code></pre></td></tr></table></figure><p>5.运行得到结果（时间应该不短捏）</p><p><img src="/images/image-20230916094040284.png" alt="image-20230916094040284"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/15/buuctf%20crypto%20%E3%80%90%5BMRCTF2020%5D%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E7%9F%A5%E5%A4%9A%E5%B0%91%E3%80%91%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/09/15/buuctf%20crypto%20%E3%80%90%5BMRCTF2020%5D%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E7%9F%A5%E5%A4%9A%E5%B0%91%E3%80%91%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="buuctf-crypto-【-MRCTF2020-古典密码知多少】解题记录"><a href="#buuctf-crypto-【-MRCTF2020-古典密码知多少】解题记录" class="headerlink" title="buuctf crypto 【[MRCTF2020]古典密码知多少】解题记录"></a>buuctf crypto 【[MRCTF2020]古典密码知多少】解题记录</h3><p>1.打开文件，一张图片</p><p><img src="/images/image-20230915100003897.png" alt="image-20230915100003897"></p><p>2.查了别人的wp（<a href="https://blog.csdn.net/ao52426055/article/details/109304646%EF%BC%89%EF%BC%8C%E5%BA%94%E8%AF%A5%E6%98%AF%E6%A0%87%E5%87%86%E9%93%B6%E6%B2%B3%E5%AD%97%E6%AF%8D+%E5%9C%A3%E5%A0%82%E6%AD%A6%E5%A3%AB%E5%AF%86%E7%A0%81+%E7%8C%AA%E5%9C%88%E5%AF%86%E7%A0%81%EF%BC%8C%E5%AF%B9%E7%85%A7%E8%A7%A3%E5%87%BA%E4%B8%BA%EF%BC%9AFGCPFLIRTUASYON">https://blog.csdn.net/ao52426055/article/details/109304646），应该是标准银河字母+圣堂武士密码+猪圈密码，对照解出为：FGCPFLIRTUASYON</a></p><p>3.栅栏解密一下即可</p><p><img src="/images/image-20230915100430204.png" alt="image-20230915100430204"></p><p>4.flag为{CRYPTOFUN}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/15/buuctf%20crypto%20%E3%80%90%5BWUSTCTF2020%5D%E4%BD%9B%E8%AF%B4%EF%BC%9A%E5%8F%AA%E8%83%BD%E5%9B%9B%E5%A4%A9%E3%80%91%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/09/15/buuctf%20crypto%20%E3%80%90%5BWUSTCTF2020%5D%E4%BD%9B%E8%AF%B4%EF%BC%9A%E5%8F%AA%E8%83%BD%E5%9B%9B%E5%A4%A9%E3%80%91%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="buuctf-crypto-【-WUSTCTF2020-佛说：只能四天】解题记录"><a href="#buuctf-crypto-【-WUSTCTF2020-佛说：只能四天】解题记录" class="headerlink" title="buuctf crypto 【[WUSTCTF2020]佛说：只能四天】解题记录"></a>buuctf crypto 【[WUSTCTF2020]佛说：只能四天】解题记录</h3><p>1.打开文件</p><p><img src="/images/image-20230915093151040.png" alt="image-20230915093151040"></p><p>2.根据描述，先用新约佛论解密（<a href="http://hi.pcmoe.net/buddha.html%EF%BC%89">http://hi.pcmoe.net/buddha.html）</a></p><p><img src="/images/image-20230915093428986.png" alt="image-20230915093428986"></p><p>3.感觉跟核心价值观有关系，试着解密一下（<a href="http://www.hiencode.com/cvencode.html%EF%BC%89">http://www.hiencode.com/cvencode.html）</a></p><p><img src="/images/image-20230915093640179.png" alt="image-20230915093640179"></p><p>4.根据提示，栅栏密码尝试解密，栏数为4时，看到另一个提示</p><p><img src="/images/image-20230915094323822.png" alt="image-20230915094323822"></p><p>5.凯撒密码（位移数为3时叫做凯撒）解密一下</p><p><img src="/images/image-20230915094609885.png" alt="image-20230915094609885"></p><p>6.提示说凯撒不是最后一步，猜测是base，尝试一下（<a href="https://www.qqxiuzi.cn/bianma/base.php%EF%BC%89">https://www.qqxiuzi.cn/bianma/base.php）</a></p><p><img src="/images/image-20230915094831209.png" alt="image-20230915094831209"></p><p>7.得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/09/14/hello-world/"/>
    <url>/2023/09/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
